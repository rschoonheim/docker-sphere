// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/gateway/authentication/v1/authentication.proto

package gateway_authenticationconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	authentication "docker_sphere_cli/docker_sphere/gateway/pkg/authentication"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "proto.gateway.authentication.v1.AuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceLoginProcedure is the fully-qualified name of the AuthenticationService's
	// Login RPC.
	AuthenticationServiceLoginProcedure = "/proto.gateway.authentication.v1.AuthenticationService/Login"
	// AuthenticationServiceLogoutProcedure is the fully-qualified name of the AuthenticationService's
	// Logout RPC.
	AuthenticationServiceLogoutProcedure = "/proto.gateway.authentication.v1.AuthenticationService/Logout"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authenticationServiceServiceDescriptor      = authentication.File_proto_gateway_authentication_v1_authentication_proto.Services().ByName("AuthenticationService")
	authenticationServiceLoginMethodDescriptor  = authenticationServiceServiceDescriptor.Methods().ByName("Login")
	authenticationServiceLogoutMethodDescriptor = authenticationServiceServiceDescriptor.Methods().ByName("Logout")
)

// AuthenticationServiceClient is a client for the
// proto.gateway.authentication.v1.AuthenticationService service.
type AuthenticationServiceClient interface {
	Login(context.Context, *connect.Request[authentication.LoginRequest]) (*connect.Response[authentication.LoginResponse], error)
	Logout(context.Context, *connect.Request[authentication.LogoutRequest]) (*connect.Response[authentication.LogoutResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the
// proto.gateway.authentication.v1.AuthenticationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationServiceClient{
		login: connect.NewClient[authentication.LoginRequest, authentication.LoginResponse](
			httpClient,
			baseURL+AuthenticationServiceLoginProcedure,
			connect.WithSchema(authenticationServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[authentication.LogoutRequest, authentication.LogoutResponse](
			httpClient,
			baseURL+AuthenticationServiceLogoutProcedure,
			connect.WithSchema(authenticationServiceLogoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	login  *connect.Client[authentication.LoginRequest, authentication.LoginResponse]
	logout *connect.Client[authentication.LogoutRequest, authentication.LogoutResponse]
}

// Login calls proto.gateway.authentication.v1.AuthenticationService.Login.
func (c *authenticationServiceClient) Login(ctx context.Context, req *connect.Request[authentication.LoginRequest]) (*connect.Response[authentication.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls proto.gateway.authentication.v1.AuthenticationService.Logout.
func (c *authenticationServiceClient) Logout(ctx context.Context, req *connect.Request[authentication.LogoutRequest]) (*connect.Response[authentication.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the
// proto.gateway.authentication.v1.AuthenticationService service.
type AuthenticationServiceHandler interface {
	Login(context.Context, *connect.Request[authentication.LoginRequest]) (*connect.Response[authentication.LoginResponse], error)
	Logout(context.Context, *connect.Request[authentication.LogoutRequest]) (*connect.Response[authentication.LogoutResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceLoginHandler := connect.NewUnaryHandler(
		AuthenticationServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authenticationServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceLogoutHandler := connect.NewUnaryHandler(
		AuthenticationServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authenticationServiceLogoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.gateway.authentication.v1.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceLoginProcedure:
			authenticationServiceLoginHandler.ServeHTTP(w, r)
		case AuthenticationServiceLogoutProcedure:
			authenticationServiceLogoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) Login(context.Context, *connect.Request[authentication.LoginRequest]) (*connect.Response[authentication.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.gateway.authentication.v1.AuthenticationService.Login is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) Logout(context.Context, *connect.Request[authentication.LogoutRequest]) (*connect.Response[authentication.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.gateway.authentication.v1.AuthenticationService.Logout is not implemented"))
}
