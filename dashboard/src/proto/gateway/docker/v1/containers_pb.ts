// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file proto/gateway/docker/v1/containers.proto (package proto.gateway.docker.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.gateway.docker.v1.ListContainersRequest
 */
export class ListContainersRequest extends Message<ListContainersRequest> {
  /**
   * @generated from field: string filter = 1;
   */
  filter = "";

  constructor(data?: PartialMessage<ListContainersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.gateway.docker.v1.ListContainersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContainersRequest {
    return new ListContainersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContainersRequest {
    return new ListContainersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContainersRequest {
    return new ListContainersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListContainersRequest | PlainMessage<ListContainersRequest> | undefined, b: ListContainersRequest | PlainMessage<ListContainersRequest> | undefined): boolean {
    return proto3.util.equals(ListContainersRequest, a, b);
  }
}

/**
 * @generated from message proto.gateway.docker.v1.ListContainersResponse
 */
export class ListContainersResponse extends Message<ListContainersResponse> {
  /**
   * @generated from field: repeated proto.gateway.docker.v1.Container containers = 1;
   */
  containers: Container[] = [];

  constructor(data?: PartialMessage<ListContainersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.gateway.docker.v1.ListContainersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "containers", kind: "message", T: Container, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContainersResponse {
    return new ListContainersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContainersResponse {
    return new ListContainersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContainersResponse {
    return new ListContainersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListContainersResponse | PlainMessage<ListContainersResponse> | undefined, b: ListContainersResponse | PlainMessage<ListContainersResponse> | undefined): boolean {
    return proto3.util.equals(ListContainersResponse, a, b);
  }
}

/**
 * @generated from message proto.gateway.docker.v1.Container
 */
export class Container extends Message<Container> {
  /**
   * id
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string status = 3;
   */
  status = "";

  constructor(data?: PartialMessage<Container>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.gateway.docker.v1.Container";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Container {
    return new Container().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Container {
    return new Container().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Container {
    return new Container().fromJsonString(jsonString, options);
  }

  static equals(a: Container | PlainMessage<Container> | undefined, b: Container | PlainMessage<Container> | undefined): boolean {
    return proto3.util.equals(Container, a, b);
  }
}

