/**
 * @fileoverview gRPC-Web generated client stub for deployment.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: deployment/deployment.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as deployment_deployment_pb from '../deployment/deployment_pb';


export class DeploymentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateDeployment = new grpcWeb.MethodDescriptor(
    '/deployment.v1.DeploymentService/CreateDeployment',
    grpcWeb.MethodType.UNARY,
    deployment_deployment_pb.CreateDeploymentRequest,
    deployment_deployment_pb.CreateDeploymentResponse,
    (request: deployment_deployment_pb.CreateDeploymentRequest) => {
      return request.serializeBinary();
    },
    deployment_deployment_pb.CreateDeploymentResponse.deserializeBinary
  );

  createDeployment(
    request: deployment_deployment_pb.CreateDeploymentRequest,
    metadata: grpcWeb.Metadata | null): Promise<deployment_deployment_pb.CreateDeploymentResponse>;

  createDeployment(
    request: deployment_deployment_pb.CreateDeploymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: deployment_deployment_pb.CreateDeploymentResponse) => void): grpcWeb.ClientReadableStream<deployment_deployment_pb.CreateDeploymentResponse>;

  createDeployment(
    request: deployment_deployment_pb.CreateDeploymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: deployment_deployment_pb.CreateDeploymentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/deployment.v1.DeploymentService/CreateDeployment',
        request,
        metadata || {},
        this.methodDescriptorCreateDeployment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/deployment.v1.DeploymentService/CreateDeployment',
    request,
    metadata || {},
    this.methodDescriptorCreateDeployment);
  }

  methodDescriptorGetDeployment = new grpcWeb.MethodDescriptor(
    '/deployment.v1.DeploymentService/GetDeployment',
    grpcWeb.MethodType.UNARY,
    deployment_deployment_pb.GetDeploymentRequest,
    deployment_deployment_pb.GetDeploymentResponse,
    (request: deployment_deployment_pb.GetDeploymentRequest) => {
      return request.serializeBinary();
    },
    deployment_deployment_pb.GetDeploymentResponse.deserializeBinary
  );

  getDeployment(
    request: deployment_deployment_pb.GetDeploymentRequest,
    metadata: grpcWeb.Metadata | null): Promise<deployment_deployment_pb.GetDeploymentResponse>;

  getDeployment(
    request: deployment_deployment_pb.GetDeploymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: deployment_deployment_pb.GetDeploymentResponse) => void): grpcWeb.ClientReadableStream<deployment_deployment_pb.GetDeploymentResponse>;

  getDeployment(
    request: deployment_deployment_pb.GetDeploymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: deployment_deployment_pb.GetDeploymentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/deployment.v1.DeploymentService/GetDeployment',
        request,
        metadata || {},
        this.methodDescriptorGetDeployment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/deployment.v1.DeploymentService/GetDeployment',
    request,
    metadata || {},
    this.methodDescriptorGetDeployment);
  }

  methodDescriptorListDeployments = new grpcWeb.MethodDescriptor(
    '/deployment.v1.DeploymentService/ListDeployments',
    grpcWeb.MethodType.UNARY,
    deployment_deployment_pb.ListDeploymentsRequest,
    deployment_deployment_pb.ListDeploymentsResponse,
    (request: deployment_deployment_pb.ListDeploymentsRequest) => {
      return request.serializeBinary();
    },
    deployment_deployment_pb.ListDeploymentsResponse.deserializeBinary
  );

  listDeployments(
    request: deployment_deployment_pb.ListDeploymentsRequest,
    metadata: grpcWeb.Metadata | null): Promise<deployment_deployment_pb.ListDeploymentsResponse>;

  listDeployments(
    request: deployment_deployment_pb.ListDeploymentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: deployment_deployment_pb.ListDeploymentsResponse) => void): grpcWeb.ClientReadableStream<deployment_deployment_pb.ListDeploymentsResponse>;

  listDeployments(
    request: deployment_deployment_pb.ListDeploymentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: deployment_deployment_pb.ListDeploymentsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/deployment.v1.DeploymentService/ListDeployments',
        request,
        metadata || {},
        this.methodDescriptorListDeployments,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/deployment.v1.DeploymentService/ListDeployments',
    request,
    metadata || {},
    this.methodDescriptorListDeployments);
  }

}

